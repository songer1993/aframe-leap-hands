{"dependencies":[{"name":"C:\\Users\\qison\\Google Drive\\projects\\aframe-leap-hands\\package.json","includedInParent":true,"mtime":1530686544578},{"name":"C:\\Users\\qison\\Google Drive\\projects\\aframe-leap-hands\\node_modules\\circular-array\\package.json","includedInParent":true,"mtime":1464915591000}],"generated":{"js":"/**\n * Simple circular array data structure, for storing a finitely-sized list of values and\n * automatically dropping values that no longer fit in the array. All operations are O(1).\n * @param {number} size Maximum number of value to retain.\n */\nfunction CircularArray (size) {\n  this._index = 0;\n  this._size = size;\n  this._array = [];\n}\n\nCircularArray.prototype._incr = function () { this._index = ++this._index % this._size; };\nCircularArray.prototype.array = function () { return this._array; };\nCircularArray.prototype.push = function (value) {\n  this._array[this._index] = value;\n  this._incr();\n};\n\nmodule.exports = CircularArray;\n","map":{"mappings":[{"source":"node_modules\\circular-array\\index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules\\circular-array\\index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules\\circular-array\\index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules\\circular-array\\index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules\\circular-array\\index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules\\circular-array\\index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules\\circular-array\\index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules\\circular-array\\index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules\\circular-array\\index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules\\circular-array\\index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules\\circular-array\\index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules\\circular-array\\index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules\\circular-array\\index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules\\circular-array\\index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules\\circular-array\\index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules\\circular-array\\index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules\\circular-array\\index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules\\circular-array\\index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules\\circular-array\\index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules\\circular-array\\index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}}],"sources":{"node_modules\\circular-array\\index.js":"/**\n * Simple circular array data structure, for storing a finitely-sized list of values and\n * automatically dropping values that no longer fit in the array. All operations are O(1).\n * @param {number} size Maximum number of value to retain.\n */\nfunction CircularArray (size) {\n  this._index = 0;\n  this._size = size;\n  this._array = [];\n}\n\nCircularArray.prototype._incr = function () { this._index = ++this._index % this._size; };\nCircularArray.prototype.array = function () { return this._array; };\nCircularArray.prototype.push = function (value) {\n  this._array[this._index] = value;\n  this._incr();\n};\n\nmodule.exports = CircularArray;\n"},"lineCount":20}},"hash":"2b20fc6a78371f637394f27b23a729bb","cacheData":{"env":{}}}